How to build and develop Objenesis.

= Maven =

I'm using Maven 3.0.5.

= Eclipse =

I'm using Kepler.

 # Install the M2E plugin
 # Instal Android Development Tools
 # Instal Android Configurator for M2E
 # Import the objenesis-formatting.xml file to get the right formatting.
 # Import the Objenesis Maven projects.

= Build a release =

Use
{{{
mvn clean install -Pwebsite,release,android
}}} 
from the Objenesis root directory. This will build the following artifacts:

|| *Artifact* || *Directory* || *Content* ||
|| objenesis-${project.version}-bin.zip || main/target || Binary, source and Javadoc ||
|| objenesis-tck-${project.version}-.jar || tck/target || Tck standalone jar ||
|| objenesis-tck-android-${project.version}-.apk || tck-android/target || Android Tck ||
|| website || website/target/xsite || Website deployed in objenesis-docs branch ||

== Build the Android TCK ==

Specifying the _android_ Maven profile will build the Android TCK. You need some specific configuration first:
 # Set the `ANDROID_HOME` environment variable so that it points to the "sdk" directory in your Android SDK installation.
 # Add `$ANDROID_HOME/tools` and `$ANDROID_HOME/platform-tools` to your `PATH` to for access to the Android command-line tools.

When the Android TCK is built, it will run during the Maven `integration-test` phase calling those commands
{{{
adb install -r target/objenesis-tck-android-${project.version}.apk
adb shell am instrument -w org.objenesis.tck.android/.TckInstrumentation
}}}

It can run on an actual device or the Android simulator. 

For an actual device, just connect it via USB.

For the simulator:

 # Run the Android SDK manager through Eclipse or by typing `android`
 # Make sure the System Image for the version you want to test on is installed. 
 # Run the Virtual Device Manager (Tools -> AVD Manager) and click "New" to define a new virtual device
 # Again, be sure to select the System Image you're interested in. (The choice of CPU and device really shouldn't impact the Objenesis TCK.) 
 # Make sure that your device has a little RAM and storage. 
 # Once it's created, you can start it by clicking "Start". 
 # Give it time to boot up and your good to go.

= Deliver a release =

We use the maven release plugin for that. From a clean checkout, call 
{{{
mvn release:prepare -DdryRun=true -Darguments=-Dgpg.passphrase=thephrase -Prelease,website,android
}}}
from the Objenesis root directory. Answer the questions. You can press enter (to validate the default) for all of them expect the tag which should be something like `1_0`. The GPG parameter is required due to a bug in the `maven-release-plugin` that prevents the GPG plugin to ask for a password interactively.

If everything goes well, do the real release (dryRun=true does a release simulation).
{{{
mvn release:prepare -Dresume=false -Darguments=-Dgpg.passphrase=thephrase -Prelease,website,android
}}}
Give the same answers to the questions.

At this point, the tag has been created and the version upgraded in the poms. You are now ready to upload the artifacts to Sonatype
{{{
mvn release:perform -Darguments=-Dgpg.passphrase=thephrase -Prelease,website,android
}}}

Now just add the binaries, sources and TCKs to the [http://code.google.com/p/objenesis/downloads/list download section].

Finally, check-in the website in the gh-pages branch.

= Test =

Normal tests are done as usual through `mvn test`. To perform tests on every supported platforms, call `mvn -Pjvm-test test`. This will launch the TCK tests on all JVMs. The path for these JVMs should be specified in the settings.xml file of your home directory. Here's an example:
{{{
<settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd">

  <profiles>
    <profile>
      <id>jvm-test</id>
      
      <properties>
        <sun_jdk>C:\Program Files\Java\jre1.6.0\bin\java.exe</sun_jdk>
        <jrockit>C:\Program Files\Java\jrockit-R26.4.0-jre1.4.2_11\bin\java.exe</jrockit>
      </properties>
      
    </profile>
  </profiles>

</settings>
}}}

= Upgrade the license =

Every year, the copyrights must be extended which means that all file headers must be updated. To perform this boring task, use to following Maven command:
{{{
mvn install -Plicense -Dmaven.test.skip=true
}}}